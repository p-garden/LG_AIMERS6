# -*- coding: utf-8 -*-
"""1등.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dNNGRVEs_FD4pbrnbrSpzaS_8LgZIGWm
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/AIMERS/

import warnings
warnings.filterwarnings("ignore", category=UserWarning, module="matplotlib.font_manager")

pip install autogluon

import pandas as pd
from autogluon.tabular import TabularPredictor
from sklearn.preprocessing import LabelEncoder
import pandas as pd

#########################################

#########################################
def preprocess_data(df):

    # 제거할 컬럼
    drop_columns = [
        '불임 원인 - 자궁경부 문제', '미세주입 후 저장된 배아 수', '불임 원인 - 정자 면역학적 요인'
    ]

    df = df.drop(columns=[col for col in drop_columns if col in df.columns])

    # ✅ 피처 엔지니어링 적용
    df["배아 수 제곱"] = df["이식된 배아 수"] ** 2

    # ✅ 연령대를 중앙값으로 변환하여 숫자로 변환
    age_mapping = {
        "만18-34세": 26,
        "만35-37세": 36,
        "만38-39세": 38.5,
        "만40-42세": 41,
        "만43-44세": 43.5,
        "만45-50세": 47.5,
        "알 수 없음": -1  # "알 수 없음"을 특별한 값으로 처리
    }

    # ✅ 매핑 적용
    df["시술 당시 나이 숫자"] = df["시술 당시 나이"].map(age_mapping)

    # 배아 개수 대비 저장된 배아 수 비율 (배아 보존율)
    df["배아 보존율"] = df["저장된 배아 수"] / (df["총 생성 배아 수"] + 1)  # 0으로 나누는 것 방지

    # ✅ 나이와 배아 수의 비율 변수 생성
    df["배아 수 대비 나이"] = df["시술 당시 나이 숫자"] / (df["이식된 배아 수"] + 1)

    return df

import pandas as pd
from autogluon.tabular import TabularPredictor

# ✅ 데이터 로드
train = pd.read_csv("data/train.csv")
test = pd.read_csv("data/test.csv")

train = preprocess_data(train)
test = preprocess_data(test)

# ✅ ID 제거
train = train.drop(columns=["ID"])
test_id = test["ID"]
test= test.drop(columns=["ID"])

hyperparameters = {
    "GBM": {},
    "CAT": {},
    "XGB": {},
    "RF": {}
}

# ✅ 모델 저장 경로
save_path = "new_start2"

# 모델 학습
predictor = TabularPredictor(label="임신 성공 여부", eval_metric="roc_auc", path=save_path)
predictor.fit(train, presets="best_quality", time_limit=7200, num_bag_folds=10, hyperparameters=hyperparameters, num_stack_levels=1)


# 예측
pred = predictor.predict_proba(test)  # ID 제거 후 예측
submission = pd.DataFrame({"ID": test_id, "probability": pred[1]})  # 1의 확률 사용

# 예측
pred = predictor.predict_proba(test)  # ID 제거 후 예측
submission = pd.DataFrame({"ID": test_id, "probability": pred[1]})  # 1의 확률 사용

# 결과 병합 및 저장
submission.to_csv("new_start2/Submission.csv", index=False)

print("Submission file created: Submission.csv")

# 리더보드 출력
predictor.leaderboard(silent=False)

importance = predictor.feature_importance(train)
print(importance)

importance.head(40)

importance.tail(33)

# '특정 시술 유형' 별 '임신 성공 여부' 개수 확인
success_counts = train.groupby("이식된 배아 수")["임신 성공 여부"].value_counts().unstack().fillna(0).astype(int)

# 결과 출력
print(success_counts)

